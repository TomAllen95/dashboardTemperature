{"version":3,"sources":["logo.svg","Components/NavBar.js","Components/GridTitle.js","Components/DoughnutChart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","props","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","src","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","id","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","GridTitle","class","scope","DoughnutChart","colorScale","data","x","y","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uLAAAA,EAAOC,QAAU,IAA0B,kC,sOC6D1BC,EA5CA,SAACC,GAAW,IAAD,EACIC,oBAAS,GADb,mBACjBC,EADiB,KACTC,EADS,KAKxB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,OAAOC,OAAK,EAACC,OAAO,MAChC,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAI,yBAAKC,IAAI,oEAC/B,kBAACC,EAAA,EAAD,CAAeC,QANN,kBAAMT,GAAWD,MAO1B,kBAACW,EAAA,EAAD,CAAUX,OAAQA,EAAQY,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC7B,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAST,KAAK,eAAeU,GAAG,WAAhC,SAEF,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAST,KAAK,KAAI,uBAAGU,GAAG,WAAN,YAEpB,kBAACC,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAChC,kBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GACvB,uBAAGL,GAAG,WAAN,YAEF,kBAACM,EAAA,EAAD,CAAcC,OAAK,GACjB,kBAACC,EAAA,EAAD,iBAGA,kBAACA,EAAA,EAAD,iBAGA,kBAACA,EAAA,EAAD,CAAcC,SAAO,IACrB,kBAACD,EAAA,EAAD,iBAMN,kBAACnB,EAAA,EAAD,CAAaC,KAAK,KAAI,yBAAKC,IAAI,yECnD5B,SAASmB,IACpB,OACI,6BACI,yBAAKV,GAAG,yBACJ,wBAAIA,GAAG,cAAP,gBAGhB,2BAAOW,MAAM,4CACX,2BAAOA,MAAM,cACX,4BACE,wBAAIC,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,YACA,wBAAIA,MAAM,OAAV,YAGJ,+BACE,4BACE,wBAAIA,MAAM,OAAV,kBACA,oCACA,2CACA,oCAEF,4BACE,wBAAIA,MAAM,OAAV,sBACA,mCACA,iDACA,oCAEF,4BACE,wBAAIA,MAAM,OAAV,oBACA,kCACA,0CACA,qD,aChCS,SAASC,IACpB,OACI,kBAAC,IAAD,CACAC,WAAY,CAAC,MAAO,UAClBC,KAAM,CACJ,CAAEC,EAAG,MAAOC,EAAG,IACf,CAAED,EAAG,KAAMC,EAAG,OCgBXC,MAdf,WACE,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKc,MAAM,cACT,kBAACE,EAAD,CAAeF,MAAM,WACrB,kBAACE,EAAD,CAAeF,MAAM,WACrB,kBAACE,EAAD,CAAeF,MAAM,YAEvB,kBAACD,EAAD,QCRcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cea21d96.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { useState } from 'react'\n\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    // NavbarText\n  } from 'reactstrap';\n  \n  const NavBar = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n  \n    const toggle = () => setIsOpen(!isOpen);\n  \n    return (\n      <div>\n        <Navbar color=\"dark\" light expand=\"md\" >\n          <NavbarBrand href=\"/\"><img src=\"https://www.ramsayhealth.com/Content/images/imgRamsayLogo3.png\"></img></NavbarBrand>\n          <NavbarToggler onClick={toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"mr-auto\" navbar>\n              <NavItem>\n                <NavLink href=\"/components/\" id=\"navText\">Home</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"#\"><a id=\"navText\">Alerts</a></NavLink>\n              </NavItem>\n              <UncontrolledDropdown nav inNavbar>\n                <DropdownToggle nav caret>\n                  <a id=\"navText\">Reports</a>\n                </DropdownToggle>\n                <DropdownMenu right>\n                  <DropdownItem>\n                    Option 1\n                  </DropdownItem>\n                  <DropdownItem>\n                    Option 2\n                  </DropdownItem>\n                  <DropdownItem divider />\n                  <DropdownItem>\n                    Reset\n                  </DropdownItem>\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            </Nav>\n            <NavbarBrand href=\"/\"><img src=\"https://www.iothorizon.com/uploads/images/logos/logo-header.png\"></img></NavbarBrand>\n            {/* <NavbarText>Simple Text</NavbarText> */}\n          </Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n  \n  export default NavBar;","import React from 'react'\n\nexport default function GridTitle() {\n    return (\n        <div>\n            <div id=\"tableTitlePlaceholder\">\n                <h5 id=\"tableTitle\">Device List</h5>\n            </div> \n        \n<table class=\"table table-striped table-hover table-sm\">\n  <thead class=\"thead-dark\">\n    <tr>\n      <th scope=\"col\">Device Name</th>\n      <th scope=\"col\">Temperature</th>\n      <th scope=\"col\">Location</th>\n      <th scope=\"col\">Alerts</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">ID:0092893u498</th>\n      <td>10.C</td>\n      <td>Drug Room 4</td>\n      <td>N/A</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">ID: 53987593759023</th>\n      <td>-5C</td>\n      <td>Ward 1 - Cupboard</td>\n      <td>N/A</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">ID: 523028520343</th>\n      <td>0C</td>\n      <td>Pharmacy 2</td>\n      <td>Temp Out of Range</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n    )\n}\n","import React from 'react'\nimport { VictoryPie } from 'victory';\n\nexport default function DoughnutChart() {\n    return (\n        <VictoryPie\n        colorScale={[\"red\", \"orange\" ]}\n          data={[\n            { x: \"Off\", y: 25},\n            { x: \"On\", y: 75 }\n          ]}\n        />\n    )\n}\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NavBar from \"./Components/NavBar\"\nimport GridTitle from './Components/GridTitle';\nimport DoughnutChart from './Components/DoughnutChart';\n\n\n  \n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar/>\n      <div class=\"homeCharts\">\n        <DoughnutChart class=\"chart1\"/>\n        <DoughnutChart class=\"chart2\"/>\n        <DoughnutChart class=\"chart3\"/>\n      </div>\n      <GridTitle/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}